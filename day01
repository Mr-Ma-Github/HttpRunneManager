测试开发学习笔记（一）

一：linux环境搭建
1.	Python3环境搭建
（1）如果是新服器，需要安装一些命令：yum -y install lrzsz
（2）yum安装依赖包  避免后面出现少包的问题
     yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel mysql-devel
     可新建一个目录python36，用来存放Python压缩包和解压
（3）wget下载python版本 https://www.python.org/ftp/python/  找到 Python-3.6.8.tgz包
     也可以通过rz命令，将本地的压缩包上传到linux上
（4）解压tar -xvf Python-3.6.8.tgz
（5）cd到解压后的Python-3.6.8下，指定安装目录，执行命令：./configure --prefix=/root/python36
     假如报错configure: error: no acceptable C compiler found in $PATH*，是因为缺少gcc编译环境，执行命令安装即可：yum install gcc
（6）执行编译：make
（7）执行安装：make install
（8）由于linux系统自带python2.7环境，输入python指向的是2.7版本。因此需要让python3 指向python3.6。需要设置python3的软链接，执行命令：ln -s  /root/python36/bin/python3.6  /usr/bin/python3
（9）设置pip3 软链接，执行命令：ln -s /root/python36/bin/pip3  /usr/bin/pip3
（10）后面所有的命令，都是用此命令设置软链接。（查找命令：find / -name pytest）
2.	docker环境搭建
（1）Docker 运行在 CentOS 7 (64-bit)上，要求系统为64位、系统内核版本为 3.10 以上。
     查看系统版本：cat /etc/centos-release
     查看系统内核版本：uname -a
（2）安装Docker依赖包：sudo yum install -y yum-utils device-mapper-persistent-data lvm2
（3）添加docker 下载源地址：sudo yum-config-manager --add-repo  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
（4）更新yum缓存：sudo yum makecache fast
（5）安装docker : sudo yum install docker-ce（也可以指定版本安装：sudo yum install docker-ce-17.12.1.ce）
（6）可以通过此命令查看docker版本：docker version
（7）Docker安装在linux系统上实际也是一个应用，因此需要先启动服务。
    相关命令：
    启动docker：systemctl start docker
    停掉docker服务：systemctl stop docker
    查看docker状态：systemctl status docker
（8）需要将docker加入开机启动项：systemctl enable docker
（9）卸载docker命令：sudo yum remove docker docker-client docker-client-latest  docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux   docker-engine-selinux docker-engine
3.	使用docker搭建mysql环境：
（1）查看本地镜像命令  docker images
（2）拉取(下载)镜像   docker pull mysql:5.7（5.7是mysql的标签，类似版本的概念，后面没有版本号的话，默认是最新的标签，即latest）
（3）镜像仓库地址：https://hub.docker.com/
（4）在家目录下，新建挂载目录：
    cd ~
    mkdir mhy2021
    mkdir -p ~/mhy2021/mysql/conf ~/mhy2021/mysql/data
（5）启动容器：
    cd mhy2021/mysql/
    执行命令，指定端口号，将3306映射到3309：
    docker run -p 3309:3306 --name mhymysql -v ~/mhy2021/mysql/conf:/etc/mysql/conf.d -v ~/mhy2021/mysql/logs:/logs -v ~/mhy2021/mysql/data:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
（6）进mysql容器操作mysql：docker exec -it mhymysql bash
（7）进mysql应用，使用root用户操作mysql：
    cd var/lib/mysql
    mysql -uroot -p
    输入密码后，就进入mysql了
（8）进入mysql后的一些指令：（所有指令后都需要加;）
    查看数据库：show databases;
    进入数据库：user mysql;
    查看表：show tables;
    查询表：select * from user;
    退出mysql：quit
（9）退出容器：exit
（10）在Navicat中连接数据库，主机ip为服务器ip，端口号为docker中映射的端口号，即3309
（11）平台的测试报告附件过大会导致mysql出现ERROR : (2006, 'MySQL server has gone away') 问题，需要在docker中修改相应配置解决此问题。
    执行以下命令：
    docker exec -it haowu bash
    cd /ect/mysql
    安装vim：apt-get update
		           apt-get install vim
    vim my.cnf
    保存以下数据
    [mysqld]
    wait_timeout = 108000
    max_allowed_packet = 100M
    重启mysql容器

二：httprunnermanager环境搭建
（1）下载httprunnermanager_web.zip安装包
（2）新建一个目录，存放并解压该压缩包：
    mkdir httprunnermanager2021
    cd httprunnermanager2021
    通过rz，将压缩包放入该目录
    解压：unzip httprunnermanager_web.zip
（3）pip 安装requirements.txt文件：（因压缩包自带的requirements.txt文件中第三方库不全，需要替换成提供的requirements.txt）
    cd httprunnermanger_web
    rm -f requirements.txt
    通过rz命令，将提供的requirements.txt上传到该目录下
    pip3 install -r requirements.txt
（4）使用Navicat建库，数据库名称（可自定义）为hrun，类型是utf8，排序规则是：utf-8_general_ci
（5）编辑settings.py文件，修改数据库的配置
    cd HttpRunnerManager
    vi settings.py
    找到数据库相关数据，按i进入编辑模式，修改数据库信息，端口号记得设置成docker镜像中映射的（3309）
    修改成功后，按esc键退出编辑，并执行:wq命令保存并退出。
    执行cat settings.py命令，查看是否修改成功
（6）Django同步数据库：
    返回到httprunnermanger_web目录；
    生成表结构：python3 manage.py makemigrations
    同步数据库：python3 manage.py migrate
（7）创建django的后台 /admin的账号密码
    python3 manage.py createsuperuser
    输入账号、邮箱、密码后，创建成功
    http://服务器IP:9900/admin/ 输入设置的用户名、密码，登录后台运维管理系统，可后台管理数据（服务器的IP和指定端口号）
（8）启动服务，设置访问端口号（设置成0.0.0.0是让所有人都可以访问，端口号可以随意设置）
    python3 manage.py runserver 0.0.0.0:9900
（9）访问平台首页
    浏览器中输入：http://服务器ip:9900/api/register/
（10）nohup挂后台启动（防止退出服务器之后，不能继续访问平台）
    必须在httprunnermanger_web目录（manage.py所在目录下）
    执行命令：nohup python3 manage.py runserver 0.0.0.0:9900 >log.out 2>&1 &
 
（11）其他命令：
    实时查看日志：tail -f log.out
    查看进程：ps -ef | python（ps -ef | grep python）
    杀掉进程：kill -9 进程id
 
三、rabbitMQ和celery环境搭建
1.	配置rabbitMQ
（1）下载 3.8.0-management 镜像
    命令：docker pull rabbitmq:3.8.0-management
（2）启动容器（不要换行，注意空格）
    命令：docker run -d --name rabbitmq3.8 -p 5672:5672 -p 15672:15672 -v $PWD/data:/var/lib/rabbitmq --hostname myRabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=123456 rabbitmq:3.8.0-management
（3）如果启动成功，浏览器输入：http://服务器ip:15672/ 可以打开 rabbitmq的web管理界面
（4）配置settings.py文件，将数据改成服务器的数据信息并保存成功
    BROKER_URL = 'amqp://admin:123456@1.15.92.116:5672//' if DEBUG else 'amqp://admin:123456@1.15.92.116:5672//'
    admin:123456 是上一步搭建rabbitmq的账号和密码
    127.0.0.1 是搭建rabbitmq服务器的ip地址，如果在本机上，那就可以写默认的127.0.0.1;如果不在本机，那就写对应的ip和端口。5672 是rabbitmq服务启动时候的端口，15672是打开web后台页面的端口，不一样。
    最后面有2个//不要忘记！
（5）如果启动没有问题，在项目根目录，即manage.py所在的目录，杀掉运行进程并执行以下指令，用nohup命令重启服务并挂后台运行
    命令：kill -9 进程名
    nohup python3 manage.py runserver 0.0.0.0:9900 >log.out 2>&1 &
2.	启动worker
（1）项目根目录，也就是manage.py所在的目录执行以下指令：
    python3 manage.py celery -A HttpRunnerManager worker --loglevel=info
（2）启动work后可以异步运行用例
（3）如果启动没有问题，在项目根目录，也就是manage.py所在的目录执行以下指令,用nohup命令挂后台运行
    命令：nohup python3 manage.py celery -A HttpRunnerManager worker --loglevel=info > worker.out 2>&1 &
3.	启动celery，监听定时任务
（1）启动命令：python3 manage.py celery beat --loglevel=info
（2）如果启动没有问题，在项目根目录，也就是manage.py所在的目录执行以下指令,用nohup命令挂后台运行
    命令：nohup python3 manage.py celery beat --loglevel=info > celery.out 2>&1 &
4.	配置flower，用来页面展示celery数据信息
（1）查看是否安装flower：pip3 show flower
（2）如果没有安装，就执行命令：pip3 install flower==0.9.2
（3）添加软链接（根据实际路径来执行）：ln -s /root/python36/bin/flower /usr/bin/flower
（4）启动flower：flower --port=5555
（5）在浏览器输入http://服务器ip:5555/，可以正常打开，代表启动成功
（4）如果启动没有问题，在项目根目录，也就是manage.py所在的目录执行以下指令,用nohup命令挂后台运行
    命令：nohup flower --port=5555 > flower.out 2>&1 &
4．Crontab语法
5.	邮件发送需要修改才可以使用：
(1) 打开-》
   vi /root/httprunnermanager2021/httprunnermanager_web/HttpRunnerManager/settings.py
  原内容：
   EMAIL_HOST = 'smtp.exmail.qq.com'
   EMAIL_PORT = 465

   EMAIL_USR_SSL = True
   EMAIL_SUBJECT_PREFIX = '测试部'
   EMAIL_HOST_USER = '1111@qq.com'  # 自己的邮箱
   EMAIL_HOST_PASSWORD = "1111111"  # 我的邮箱密码

   EMAIL_SEND_USERNAME = '1111@qq.com'  # 定时任务报告发送邮箱，支持163,qq,sina,企业qq邮箱等，注意需要开通smtp服务
   EMAIL_SEND_PASSWORD = '1111111'     # 邮箱密码

  新内容：
   EMAIL_HOST = 'smtp.qq.com'  # QQ邮箱
   EMAIL_PORT = 465

   EMAIL_USR_SSL = True
   EMAIL_SUBJECT_PREFIX = '测试部'
   EMAIL_HOST_USER = '1111@qq.com'  # 自己的邮箱
   EMAIL_HOST_PASSWORD = "1111111"  # 我的邮箱密码

   EMAIL_SEND_USERNAME = '846683675@qq.com'  # 定时任务报告发送邮箱，支持163,qq,sina,企业qq邮箱等，注意需要开通smtp服务
   EMAIL_SEND_PASSWORD = 'qq邮箱授权码'     # 邮箱密码(qq邮箱需要是授权码)
  Ps:主要修改的是EMAIL_HOST、EMAIL_SEND_USERNAME、EMAIL_SEND_PASSWORD 
  
(2) /root/httprunnermanager2021/httprunnermanager_web/ApiManager/utils/emails.py
  这个emails.py文件是有问题的，替换掉
6.	修改前端消息队列访问不到的问题：
打开/root/httprunnermanager2021/httprunnermanager_web/templates/base.html
<li><a href="http://192.168.1.x:15672">RabbitMQ 队列</a></li>
修改ip地址为RabbitMQ所在ip地址，以及RabbitMQ启动时的前端端口
7.	修改前端任务监控访问不到的问题：
打开/root/httprunnermanager2021/httprunnermanager_web/templates/base.html
<li><a href="http://localhost:5555/dashboard">任 务 监 控</a></li>修改ip地址为flower所在ip地址，以及flower启动时的前端端口
